import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.logger import setup_logger
from src.utils import load_config, load_private_keys, load_recipient_addresses
from src.sender import TokenSender
from src.colors import Colors
from web3 import Web3

def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print(f"{Colors.CYAN}{'=' * 60}{Colors.RESET}")
    print(f"{Colors.BOLD}{Colors.GREEN}üöÄ ETH TOKEN SENDER v2.1{Colors.RESET}")
    print(f"{Colors.CYAN}{'=' * 60}{Colors.RESET}")

def get_current_gas_info(config):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≥–∞–∑–µ"""
    try:
        w3 = Web3(Web3.HTTPProvider(config['network']['rpc_url']))
        if not w3.is_connected():
            return None, None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≥–∞–∑–∞
        gas_price = w3.eth.gas_price
        gas_price_gwei = w3.from_wei(gas_price, 'gwei')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ ETH
        gas_limit = config['transaction']['gas_limit']
        transaction_cost_wei = gas_price * gas_limit
        transaction_cost_eth = w3.from_wei(transaction_cost_wei, 'ether')
        
        return gas_price_gwei, transaction_cost_eth
        
    except Exception as e:
        return None, None

def show_gas_info(config):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≥–∞–∑–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}‚õΩ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–ê–ó–ï:{Colors.RESET}")
    print(f"{Colors.YELLOW}–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ...{Colors.RESET}")
    
    gas_price_gwei, transaction_cost_eth = get_current_gas_info(config)
    
    if gas_price_gwei is not None:
        print(f"{Colors.GREEN}‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: {gas_price_gwei:.2f} Gwei{Colors.RESET}")
        print(f"{Colors.BLUE}üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_cost_eth:.8f} ETH{Colors.RESET}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        max_gas_gwei = config.get('gas_monitor', {}).get('max_gas_price_gwei', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        if isinstance(max_gas_gwei, (int, float)):
            if gas_price_gwei <= max_gas_gwei:
                print(f"{Colors.GREEN}‚úÖ –ì–∞–∑ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ (–ª–∏–º–∏—Ç: {max_gas_gwei} Gwei){Colors.RESET}")
            else:
                print(f"{Colors.RED}‚ö†Ô∏è –ì–∞–∑ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç (–ª–∏–º–∏—Ç: {max_gas_gwei} Gwei){Colors.RESET}")
        else:
            print(f"{Colors.YELLOW}‚ÑπÔ∏è –õ–∏–º–∏—Ç –≥–∞–∑–∞: {max_gas_gwei}{Colors.RESET}")
    else:
        print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞–∑–µ{Colors.RESET}")
        print(f"{Colors.YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC: {config['network']['rpc_url']}{Colors.RESET}")

def show_startup_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é"""
    while True:
        print(f"\n{Colors.BOLD}{Colors.WHITE}üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:{Colors.RESET}")
        print(f"{Colors.GREEN}1.{Colors.RESET} {Colors.WHITE}üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–∫–µ–Ω–æ–≤{Colors.RESET}")
        print(f"{Colors.BLUE}2.{Colors.RESET} {Colors.WHITE}‚õΩ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π Gwei{Colors.RESET}")
        print(f"{Colors.RED}3.{Colors.RESET} {Colors.WHITE}‚ùå –í—ã—Ö–æ–¥{Colors.RESET}")
        
        try:
            choice = input(f"\n{Colors.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç (1-3): {Colors.RESET}").strip()
            if choice == "1":
                return "start"
            elif choice == "2":
                return "gas_info"
            elif choice == "3":
                print(f"{Colors.RED}üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.RESET}")
                return "exit"
            else:
                print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3{Colors.RESET}")
        except KeyboardInterrupt:
            print(f"\n{Colors.RED}üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.RESET}")
            return "exit"

def show_retry_menu(failed_accounts, skipped_accounts):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    total_failed = len(failed_accounts) + len(skipped_accounts)
    
    print(f"\n{Colors.BOLD}{Colors.YELLOW}‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ï–£–î–ê–ß–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´:{Colors.RESET}")
    print(f"{Colors.RED}‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(failed_accounts)}{Colors.RESET}")
    print(f"{Colors.YELLOW}‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(skipped_accounts)}{Colors.RESET}")
    print(f"{Colors.BOLD}üìä –í—Å–µ–≥–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞: {total_failed}{Colors.RESET}")
    
    print(f"\n{Colors.BOLD}{Colors.WHITE}üìã –ú–ï–ù–Æ –ü–û–í–¢–û–†–ê:{Colors.RESET}")
    print(f"{Colors.GREEN}1.{Colors.RESET} {Colors.WHITE}üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã{Colors.RESET}")
    print(f"{Colors.RED}2.{Colors.RESET} {Colors.WHITE}‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É{Colors.RESET}")
    
    while True:
        try:
            choice = input(f"\n{Colors.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç (1-2): {Colors.RESET}").strip()
            if choice == "1":
                return True
            elif choice == "2":
                print(f"{Colors.RED}üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞{Colors.RESET}")
                return False
            else:
                print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2{Colors.RESET}")
        except KeyboardInterrupt:
            print(f"\n{Colors.RED}üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.RESET}")
            return False

def get_failed_account_data(failed_accounts, skipped_accounts, all_private_keys, all_recipient_addresses):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    failed_private_keys = []
    failed_recipient_addresses = []
    
    # –°–æ–±–∏—Ä–∞–µ–º ID –≤—Å–µ—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    failed_account_ids = set()
    
    for account in failed_accounts + skipped_accounts:
        account_id = account.get('account_id')
        if account_id:
            failed_account_ids.add(account_id - 1)  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ account_id –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –∏ –∞–¥—Ä–µ—Å–∞
    for account_index in failed_account_ids:
        if account_index < len(all_private_keys) and account_index < len(all_recipient_addresses):
            failed_private_keys.append(all_private_keys[account_index])
            failed_recipient_addresses.append(all_recipient_addresses[account_index])
    
    return failed_private_keys, failed_recipient_addresses

async def run_token_sender(logger, config, private_keys, recipient_addresses, is_retry=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        if is_retry:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è {len(private_keys)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        else:
            logger.info(f"üöÄ –ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è {len(private_keys)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TokenSender
        token_sender = TokenSender(config, logger)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
        await token_sender.process_transfers(private_keys, recipient_addresses)
        
        return token_sender.stats
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é"""
    print_header()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = setup_logger()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–µ–Ω—é
        while True:
            menu_choice = show_startup_menu()
            
            if menu_choice == "exit":
                return
            elif menu_choice == "gas_info":
                show_gas_info(config)
                continue  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            elif menu_choice == "start":
                break
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        all_private_keys = load_private_keys()
        all_recipient_addresses = load_recipient_addresses()
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_private_keys)} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏ {len(all_recipient_addresses)} –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        stats = await run_token_sender(logger, config, all_private_keys, all_recipient_addresses, is_retry=False)
        
        if stats is None:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–∫–µ–Ω–æ–≤")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ
        failed_accounts = stats.get('failed_accounts', [])
        skipped_accounts = stats.get('skipped_accounts', [])
        successful_accounts = stats.get('successful_accounts', [])
        
        total_accounts = len(all_private_keys)
        total_failed = len(failed_accounts) + len(skipped_accounts)
        
        # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ - –∑–∞–≤–µ—Ä—à–∞–µ–º
        if total_failed == 0:
            logger.info(f"üéâ –í—Å–µ {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            logger.info("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ - –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä
        if show_retry_menu(failed_accounts, skipped_accounts):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            failed_private_keys, failed_recipient_addresses = get_failed_account_data(
                failed_accounts, skipped_accounts, all_private_keys, all_recipient_addresses
            )  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
            
            if failed_private_keys:
                logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(failed_private_keys)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                
                # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫
                retry_stats = await run_token_sender(
                    logger, config, failed_private_keys, failed_recipient_addresses, is_retry=True
                )
                
                if retry_stats:
                    retry_successful = len(retry_stats.get('successful_accounts', []))
                    retry_failed = len(retry_stats.get('failed_accounts', [])) + len(retry_stats.get('skipped_accounts', []))
                    
                    logger.info(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–≤—Ç–æ—Ä–∞: ‚úÖ {retry_successful} —É—Å–ø–µ—à–Ω–æ, ‚ùå {retry_failed} –Ω–µ—É–¥–∞—á–Ω–æ")
                    
                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    total_successful = len(successful_accounts) + retry_successful
                    total_remaining_failed = retry_failed
                    
                    logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ó–ê–ü–£–°–ö–ê–ú:")
                    logger.info(f"‚úÖ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö: {total_successful}/{total_accounts}")
                    logger.info(f"‚ùå –í—Å–µ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö: {total_remaining_failed}/{total_accounts}")
                    
                    if total_remaining_failed == 0:
                        logger.info("üéâ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞!")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {total_remaining_failed}")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
    except FileNotFoundError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        print(f"{Colors.RED}‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤{Colors.RESET}")
    except ConnectionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        print(f"{Colors.RED}‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ RPC{Colors.RESET}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"{Colors.RED}‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞{Colors.RESET}")
    
    logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print(f"{Colors.CYAN}{'=' * 60}{Colors.RESET}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n{Colors.RED}üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.RESET}")
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}{Colors.RESET}")