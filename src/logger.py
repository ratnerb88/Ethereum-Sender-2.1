import logging
import os
from datetime import datetime
import sys
from .colors import Colors

class ColoredFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.COLORS = {
            logging.DEBUG: Colors.BRIGHT_BLACK,
            logging.INFO: Colors.WHITE,
            logging.WARNING: Colors.YELLOW,
            logging.ERROR: Colors.RED,
            logging.CRITICAL: Colors.BRIGHT_RED + Colors.BOLD,
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.SUCCESS_COLOR = Colors.BRIGHT_GREEN
        self.SKIP_COLOR = Colors.YELLOW
        self.FAIL_COLOR = Colors.RED
        self.PROGRESS_COLOR = Colors.CYAN
        self.ACCOUNT_COLOR = Colors.BRIGHT_BLUE

    def format(self, record):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        original_msg = record.getMessage()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        color = self.COLORS.get(record.levelno, Colors.WHITE)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if "—É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" in original_msg or "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" in original_msg:
            color = self.SUCCESS_COLOR
            record.msg = f"‚úÖ {original_msg}"
        elif "–ø—Ä–æ–ø—É—â–µ–Ω" in original_msg.lower() or "skip" in original_msg.lower():
            color = self.SKIP_COLOR
            record.msg = f"‚è≠Ô∏è {original_msg}"
        elif "–æ—à–∏–±–∫–∞" in original_msg.lower() or "error" in original_msg.lower() or "–Ω–µ —É–¥–∞–ª–∞—Å—å" in original_msg:
            color = self.FAIL_COLOR
            record.msg = f"‚ùå {original_msg}"
        elif "–ê–∫–∫–∞—É–Ω—Ç" in original_msg:
            color = self.ACCOUNT_COLOR
            record.msg = f"üë§ {original_msg}"
        elif "–¶–µ–Ω–∞ –≥–∞–∑–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞" in original_msg:
            color = self.SUCCESS_COLOR
            record.msg = f"‚õΩ {original_msg}"
        elif "–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞" in original_msg:
            color = self.FAIL_COLOR
            record.msg = f"‚õΩ {original_msg}"
        elif "–ü—Ä–æ–≥—Ä–µ—Å—Å" in original_msg or "%" in original_msg:
            color = self.PROGRESS_COLOR
        else:
            record.msg = original_msg
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        record.msg = f"{color}{record.msg}{Colors.RESET}"
        
        return super().format(record)

def create_clickable_link(url, text=None, color=Colors.BRIGHT_GREEN):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å —Ü–≤–µ—Ç–æ–º"""
    if text is None:
        text = url
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ANSI escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    return f"{color}{Colors.UNDERLINE}\033]8;;{url}\033\\{text}\033]8;;\033\\{Colors.RESET}"

def setup_logger():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir = "logs"
    if not os.path.exists(logs_dir):
        os.makedirs(logs_dir)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_format = "%(asctime)s - %(levelname)s - %(message)s"
    date_format = "%Y-%m-%d %H:%M:%S"
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger("eth_sender")
    logger.setLevel(logging.INFO)
    logger.handlers.clear()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Å —Ü–≤–µ—Ç–∞–º–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_formatter = ColoredFormatter(log_format, date_format)
    console_handler.setFormatter(console_formatter)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤)
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_handler = logging.FileHandler(
        f"{logs_dir}/eth_sender_{current_time}.log",
        encoding='utf-8'
    )
    file_handler.setLevel(logging.INFO)
    file_formatter = logging.Formatter(log_format, date_format)
    file_handler.setFormatter(file_formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.addHandler(console_handler)
    logger.addHandler(file_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    def log_transaction_success(self, account_id, tx_hash, explorer_url, amount, token_symbol, from_address):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π"""
        full_url = f"{explorer_url}{tx_hash}"
        clickable_link = create_clickable_link(full_url, tx_hash, Colors.BRIGHT_GREEN)
        self.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {clickable_link}")
        self.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} {token_symbol} —Å {from_address[:10]}...{from_address[-6:]}")
    
    def log_account_skipped(self, account_id, reason, balance=None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        if balance:
            self.warning(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] {reason}. –ë–∞–ª–∞–Ω—Å: {balance}")
        else:
            self.warning(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] {reason}")
    
    def log_account_failed(self, account_id, error_msg):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É"""
        self.error(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] {error_msg}")
    
    def log_progress(self, current, total, success, failed, skipped):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        progress_percent = (current / total) * 100
        self.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} ({progress_percent:.1f}%) | ‚úÖ {success} | ‚ùå {failed} | ‚è≠Ô∏è {skipped}")
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –ª–æ–≥–≥–µ—Ä—É
    logging.Logger.log_transaction_success = log_transaction_success
    logging.Logger.log_account_skipped = log_account_skipped
    logging.Logger.log_account_failed = log_account_failed
    logging.Logger.log_progress = log_progress
    
    return logger