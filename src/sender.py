import asyncio
from web3 import Web3
from web3.middleware import geth_poa_middleware
import time
from datetime import datetime, timedelta
import json
import os
import random
from decimal import Decimal

class TokenSender:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""

    def __init__(self, config, logger):
        self.config = config
        self.logger = logger
        self.w3 = self._setup_web3()
        self.semaphore = asyncio.Semaphore(config['execution']['max_concurrent'])
        self.last_gas_notification = None
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self._gas_price_cache = None
        self._gas_price_cache_time = None
        self._cache_duration = 30  # –ö—ç—à–∏—Ä—É–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'successful_accounts': [],
            'failed_accounts': [],
            'skipped_accounts': [],
            'total_sent': 0,
            'total_gas_used': 0,
            'total_delay_time': 0,
            'start_time': None,
            'end_time': None
        }

    def _setup_web3(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Web3"""
        w3 = Web3(Web3.HTTPProvider(self.config['network']['rpc_url']))
        
        if self.config['network']['chain_id'] != 1:
            w3.middleware_onion.inject(geth_poa_middleware, layer=0)
        
        if not w3.is_connected():
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC: {self.config['network']['rpc_url']}")
        
        self.logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC: {self.config['network']['rpc_url']}")
        return w3

    def shuffle_wallets_data(self, private_keys, recipient_addresses):
        """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –∫–æ—à–µ–ª—å–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-–ø–æ–ª—É—á–∞—Ç–µ–ª—å"""
        if not self.config.get('execution', {}).get('shuffle_wallets', False):
            return private_keys, recipient_addresses
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π_–∫–ª—é—á, –∞–¥—Ä–µ—Å_–ø–æ–ª—É—á–∞—Ç–µ–ª—è)
        wallet_pairs = list(zip(private_keys, recipient_addresses))
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–∞—Ä—ã
        random.shuffle(wallet_pairs)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –¥–≤–∞ —Å–ø–∏—Å–∫–∞
        shuffled_private_keys, shuffled_recipient_addresses = zip(*wallet_pairs)
        
        self.logger.info("üîÄ –ö–æ—à–µ–ª—å–∫–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å-–ø–æ–ª—É—á–∞—Ç–µ–ª—å)")
        
        return list(shuffled_private_keys), list(shuffled_recipient_addresses)

    def get_random_delay(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"""
        min_delay = self.config['execution']['random_delay_range']['min']
        max_delay = self.config['execution']['random_delay_range']['max']
        return random.uniform(min_delay, max_delay)

    def get_skipped_delay(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        return self.config['execution'].get('skipped_account_delay', 2)

    def get_random_remaining_balance_wei(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ wei"""
        min_remaining = self.config['transaction']['random_remaining_balance_eth']['min']
        max_remaining = self.config['transaction']['random_remaining_balance_eth']['max']
        random_remaining_eth = random.uniform(min_remaining, max_remaining)
        return self.w3.to_wei(random_remaining_eth, 'ether'), random_remaining_eth

    def get_current_gas_price(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ –∏–∑ —Å–µ—Ç–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (self._gas_price_cache is not None and 
            self._gas_price_cache_time is not None and 
            current_time - self._gas_price_cache_time < self._cache_duration):
            return self._gas_price_cache
        
        try:
            gas_price = self.w3.eth.gas_price
            gas_price_gwei = self.w3.from_wei(gas_price, 'gwei')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._gas_price_cache = (gas_price, gas_price_gwei)
            self._gas_price_cache_time = current_time
            
            return gas_price, gas_price_gwei
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≥–∞–∑–∞: {str(e)}")
            return None, None

    async def wait_for_acceptable_gas_price(self, account_id):
        """–ñ–¥–µ—Ç –ø–æ–∫–∞ —Ü–µ–Ω–∞ –≥–∞–∑–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º–æ–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π)"""
        if not self.config.get('gas_monitor', {}).get('enabled', False):
            return True

        max_gas_gwei = self.config['gas_monitor']['max_gas_price_gwei']
        check_interval = self.config['gas_monitor']['check_interval']
        max_wait_time = self.config['gas_monitor']['max_wait_time']
        notification_interval = self.config['gas_monitor']['notification_interval']
        
        start_time = datetime.now()
        
        while True:
            gas_price_wei, gas_price_gwei = self.get_current_gas_price()
            
            if gas_price_wei is None:
                self.logger.warning(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≥–∞–∑–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return True
            
            if gas_price_gwei <= max_gas_gwei:
                self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –¶–µ–Ω–∞ –≥–∞–∑–∞ –ø—Ä–∏–µ–º–ª–µ–º–∞: {gas_price_gwei:.2f} Gwei (–ª–∏–º–∏—Ç: {max_gas_gwei} Gwei)")
                return True
            
            elapsed_time = (datetime.now() - start_time).total_seconds()
            if elapsed_time >= max_wait_time:
                self.logger.warning(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] ‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({max_wait_time/60:.1f} –º–∏–Ω—É—Ç)")
                self.logger.warning(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –≥–∞–∑–∞: {gas_price_gwei:.2f} Gwei")
                return True
            
            now = datetime.now()
            if (self.last_gas_notification is None or 
                (now - self.last_gas_notification).total_seconds() >= notification_interval):
                
                remaining_time = max_wait_time - elapsed_time
                self.logger.warning(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: {gas_price_gwei:.2f} Gwei (–ª–∏–º–∏—Ç: {max_gas_gwei} Gwei)")
                self.logger.warning(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] ‚è≥ –û–∂–∏–¥–∞–µ–º —Å–Ω–∏–∂–µ–Ω–∏—è... –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time/60:.1f} –º–∏–Ω—É—Ç")
                self.last_gas_notification = now
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–∞–∑ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                remaining_time = max_wait_time - elapsed_time
                self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] ‚õΩ –¢–µ–∫—É—â–∏–π –≥–∞–∑: {gas_price_gwei:.2f} Gwei | –õ–∏–º–∏—Ç: {max_gas_gwei} Gwei | –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time/60:.1f} –º–∏–Ω—É—Ç")
            
            await asyncio.sleep(check_interval)

    def get_gas_price(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Ü–µ–Ω—É –≥–∞–∑–∞"""
        if self.config['transaction'].get('use_dynamic_gas', False):
            try:
                gas_price = self.w3.eth.gas_price
                multiplier = self.config['transaction'].get('gas_price_multiplier', 1.2)
                gas_price = int(gas_price * multiplier)
                return gas_price
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É –≥–∞–∑–∞: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.")
        
        return self.w3.to_wei(self.config['transaction']['gas_price_gwei'], 'gwei')

    def calculate_send_amount(self, balance, gas_price, gas_limit):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤–µ—Å—å –±–∞–ª–∞–Ω—Å –º–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è –∏ —Å–ª—É—á–∞–π–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫)"""
        total_gas_cost = gas_price * gas_limit
        remaining_wei, remaining_eth = self.get_random_remaining_balance_wei()
        
        amount_to_send = balance - total_gas_cost - remaining_wei
        
        if amount_to_send <= 0:
            return 0, remaining_eth
        
        return amount_to_send, remaining_eth

    def convert_to_serializable(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if isinstance(obj, Decimal):
            return float(obj)
        elif isinstance(obj, dict):
            return {key: self.convert_to_serializable(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self.convert_to_serializable(item) for item in obj]
        else:
            return obj

    def will_next_account_be_skipped(self, next_private_key):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—É–¥–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω"""
        if not next_private_key:
            return False
        
        try:
            account = self.w3.eth.account.from_key(next_private_key)
            from_address = account.address
            balance = self.w3.eth.get_balance(from_address)
            balance_eth = float(self.w3.from_wei(balance, 'ether'))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if self.config.get('balance_check', {}).get('enabled', False):
                min_balance = self.config['balance_check']['minimum_balance']
                return balance_eth < min_balance
            
            return False
        except Exception:
            return False

    async def send_native_token(self, private_key, to_address, account_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (ETH) —Å –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
        async with self.semaphore:
            account = self.w3.eth.account.from_key(private_key)
            from_address = account.address

            self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH —Å {from_address} –Ω–∞ {to_address}")

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            try:
                balance = self.w3.eth.get_balance(from_address)
                balance_eth = float(self.w3.from_wei(balance, 'ether'))
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
                self.logger.log_account_failed(account_id, error_msg)
                self.stats['failed_accounts'].append({
                    'account_id': account_id,
                    'address': from_address,
                    'reason': error_msg
                })
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if self.config.get('balance_check', {}).get('enabled', False):
                min_balance = self.config['balance_check']['minimum_balance']
                if balance_eth < min_balance:
                    skip_msg = self.config['balance_check']['skip_message']
                    self.logger.log_account_skipped(account_id, skip_msg, f"{balance_eth:.8f} ETH")
                    self.stats['skipped_accounts'].append({
                        'account_id': account_id,
                        'address': from_address,
                        'balance': balance_eth,
                        'min_required': min_balance
                    })
                    return "skipped"
                
                self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –ë–∞–ª–∞–Ω—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω: {balance_eth:.8f} ETH (–º–∏–Ω–∏–º—É–º: {min_balance} ETH) ‚úì")

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞ –∏ –ª–∏–º–∏—Ç
            gas_price = self.get_gas_price()
            gas_limit = self.config['transaction']['gas_limit']

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            amount_wei, target_remaining = self.calculate_send_amount(balance, gas_price, gas_limit)
            
            if amount_wei <= 0:
                error_msg = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∞"
                self.logger.log_account_failed(account_id, error_msg)
                self.stats['failed_accounts'].append({
                    'account_id': account_id,
                    'address': from_address,
                    'reason': error_msg
                })
                return False

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            remaining_balance = balance - amount_wei - (gas_price * gas_limit)
            remaining_eth = float(self.w3.from_wei(remaining_balance, 'ether'))
            
            min_range = self.config['transaction']['random_remaining_balance_eth']['min']
            max_range = self.config['transaction']['random_remaining_balance_eth']['max']
            
            amount_eth = float(self.w3.from_wei(amount_wei, 'ether'))
            
            self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –±–∞–ª–∞–Ω—Å: {amount_eth:.8f} ETH")
            self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] üé≤ –°–ª—É—á–∞–π–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {target_remaining:.8f} ETH (–¥–∏–∞–ø–∞–∑–æ–Ω: {min_range}-{max_range} ETH)")
            self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –û—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ: {remaining_eth:.8f} ETH")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å—É–º–º—ã –∏ –≥–∞–∑–∞
            total_cost = amount_wei + gas_price * gas_limit
            if balance < total_cost:
                total_cost_eth = float(self.w3.from_wei(total_cost, 'ether'))
                error_msg = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å—É–º–º—ã –∏ –≥–∞–∑–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è: {total_cost_eth:.8f} ETH, –î–æ—Å—Ç—É–ø–Ω–æ: {balance_eth:.8f} ETH"
                self.logger.log_account_failed(account_id, error_msg)
                self.stats['failed_accounts'].append({
                    'account_id': account_id,
                    'address': from_address,
                    'reason': error_msg
                })
                return False

            # üî• –ü–†–û–í–ï–†–Ø–ï–ú –¶–ï–ù–£ –ì–ê–ó–ê –ù–ï–ü–û–°–†–ï–î–°–¢–í–ï–ù–ù–û –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
            self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            if not await self.wait_for_acceptable_gas_price(account_id):
                error_msg = "–û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω—ã –≥–∞–∑–∞"
                self.logger.log_account_failed(account_id, error_msg)
                self.stats['failed_accounts'].append({
                    'account_id': account_id,
                    'address': from_address,
                    'reason': error_msg
                })
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            for attempt in range(1, self.config['execution']['retry_count'] + 1):
                try:
                    nonce = self.w3.eth.get_transaction_count(from_address)
                    tx = {
                        'chainId': self.config['network']['chain_id'],
                        'nonce': nonce,
                        'to': to_address,
                        'value': amount_wei,
                        'gas': gas_limit,
                        'gasPrice': gas_price,
                    }

                    gas_price_gwei = float(self.w3.from_wei(gas_price, 'gwei'))
                    self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞: {gas_price_gwei:.2f} Gwei")

                    signed_tx = self.w3.eth.account.sign_transaction(tx, private_key)
                    tx_hash = self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
                    
                    self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_hash.hex()}")

                    receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)

                    if receipt['status'] == 1:
                        explorer_url = self.config.get('explorer', {}).get('base_url', 'https://etherscan.io/tx/')
                        amount_formatted = f"{amount_eth:.8f}"
                        
                        self.logger.log_transaction_success(
                            account_id, 
                            tx_hash.hex(), 
                            explorer_url, 
                            amount_formatted, 
                            "ETH", 
                            from_address
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤ float)
                        gas_used = int(receipt.get('gasUsed', gas_limit))
                        self.stats['successful_accounts'].append({
                            'account_id': account_id,
                            'address': from_address,
                            'amount_sent': amount_eth,
                            'gas_used': gas_used,
                            'tx_hash': tx_hash.hex(),
                            'target_remaining': target_remaining
                        })
                        self.stats['total_sent'] += amount_eth
                        self.stats['total_gas_used'] += gas_used
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                        try:
                            final_balance = self.w3.eth.get_balance(from_address)
                            final_balance_eth = float(self.w3.from_wei(final_balance, 'ether'))
                            self.logger.info(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {final_balance_eth:.8f} ETH")
                        except:
                            pass
                        
                        return True
                    else:
                        error_msg = f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {tx_hash.hex()}"
                        if attempt < self.config['execution']['retry_count']:
                            self.logger.warning(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] {error_msg}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config['execution']['retry_count']}")
                            await asyncio.sleep(5)
                        else:
                            self.logger.log_account_failed(account_id, error_msg)
                            self.stats['failed_accounts'].append({
                                'account_id': account_id,
                                'address': from_address,
                                'reason': error_msg
                            })
                            return False

                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {str(e)}"
                    
                    if "insufficient funds" in str(e).lower():
                        self.logger.log_account_failed(account_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                        self.stats['failed_accounts'].append({
                            'account_id': account_id,
                            'address': from_address,
                            'reason': "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
                        })
                        return False
                    
                    if attempt < self.config['execution']['retry_count']:
                        self.logger.warning(f"[–ê–∫–∫–∞—É–Ω—Ç {account_id}] {error_msg}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.config['execution']['retry_count']}")
                        await asyncio.sleep(5)
                    else:
                        self.logger.log_account_failed(account_id, error_msg)
                        self.stats['failed_accounts'].append({
                            'account_id': account_id,
                            'address': from_address,
                            'reason': str(e)
                        })
                        return False

            return False

    def save_results_to_files(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        results_dir = "results"
        if not os.path.exists(results_dir):
            os.makedirs(results_dir)

        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        if self.stats['failed_accounts']:
            failed_file = f"{results_dir}/failed_accounts_{timestamp}.json"
            try:
                serializable_data = self.convert_to_serializable(self.stats['failed_accounts'])
                with open(failed_file, 'w', encoding='utf-8') as f:
                    json.dump(serializable_data, f, indent=2, ensure_ascii=False)
                self.logger.info(f"–°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {failed_file}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        if self.stats['skipped_accounts']:
            skipped_file = f"{results_dir}/skipped_accounts_{timestamp}.json"
            try:
                serializable_data = self.convert_to_serializable(self.stats['skipped_accounts'])
                with open(skipped_file, 'w', encoding='utf-8') as f:
                    json.dump(serializable_data, f, indent=2, ensure_ascii=False)
                self.logger.info(f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {skipped_file}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")

    async def process_transfers(self, private_keys, recipient_addresses):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–¥–µ—Ä–∂–µ–∫"""
        self.stats['start_time'] = datetime.now()
        
        total_accounts = len(private_keys)
        
        if len(private_keys) != len(recipient_addresses):
            self.logger.error(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π ({len(private_keys)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç "
                             f"–∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π ({len(recipient_addresses)})")
            return

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        private_keys, recipient_addresses = self.shuffle_wallets_data(private_keys, recipient_addresses)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        min_remaining = self.config['transaction']['random_remaining_balance_eth']['min']
        max_remaining = self.config['transaction']['random_remaining_balance_eth']['max']
        min_delay = self.config['execution']['random_delay_range']['min']
        max_delay = self.config['execution']['random_delay_range']['max']
        skipped_delay = self.get_skipped_delay()
        
        self.logger.info(f"üé≤ –†–µ–∂–∏–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞: {min_remaining} - {max_remaining} ETH")
        self.logger.info(f"‚è∞ –†–µ–∂–∏–º —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏: {min_delay} - {max_delay} —Å–µ–∫—É–Ω–¥")
        self.logger.info(f"‚è≠Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {skipped_delay} —Å–µ–∫—É–Ω–¥")
        
        if self.config.get('execution', {}).get('shuffle_wallets', False):
            self.logger.info(f"üîÄ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤: –≤–∫–ª—é—á–µ–Ω–æ")
        
        self.logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        self.logger.info(f"‚õΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∞–∑–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–∞–¥–µ—Ä–∂–µ–∫
        for i, (private_key, to_address) in enumerate(zip(private_keys, recipient_addresses)):
            account_id = i + 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if self.config.get('execution', {}).get('show_progress', True) and i > 0:
                success_count = len(self.stats['successful_accounts'])
                failed_count = len(self.stats['failed_accounts'])
                skipped_count = len(self.stats['skipped_accounts'])
                self.logger.log_progress(i, total_accounts, success_count, failed_count, skipped_count)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            result = await self.send_native_token(private_key, to_address, account_id)
            
            # –õ–æ–≥–∏–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            if i < len(private_keys) - 1:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
                current_account_was_skipped = (result == "skipped")
                
                if current_account_was_skipped:
                    # –¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                    next_private_key = private_keys[i + 1] if i + 1 < len(private_keys) else None
                    next_will_be_skipped = self.will_next_account_be_skipped(next_private_key)
                    
                    if next_will_be_skipped:
                        # –°–ª–µ–¥—É—é—â–∏–π —Ç–æ–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω - –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        delay = skipped_delay
                        self.logger.info(f"‚è≠Ô∏è –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω): {delay} —Å–µ–∫—É–Ω–¥...")
                    else:
                        # –°–ª–µ–¥—É—é—â–∏–π –ù–ï –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω - –æ–±—ã—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        delay = self.get_random_delay()
                        self.logger.info(f"‚è∞ –û–±—ã—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ (—Å–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω): {delay:.1f} —Å–µ–∫—É–Ω–¥...")
                else:
                    # –¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ - –æ–±—ã—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    delay = self.get_random_delay()
                    self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π...")
                
                self.stats['total_delay_time'] += delay
                await asyncio.sleep(delay)
        
        self.stats['end_time'] = datetime.now()

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = len(self.stats['successful_accounts'])
        failed_count = len(self.stats['failed_accounts'])
        skipped_count = len(self.stats['skipped_accounts'])
        
        execution_time = (self.stats['end_time'] - self.stats['start_time']).total_seconds()

        self.logger.info("=" * 60)
        self.logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        self.logger.info("=" * 60)
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {success_count}")
        self.logger.error(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {failed_count}")
        if skipped_count > 0:
            self.logger.warning(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {skipped_count}")
        
        if self.config.get('execution', {}).get('detailed_stats', True):
            self.logger.info(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.stats['total_sent']:.8f} ETH")
            self.logger.info(f"‚õΩ –û–±—â–∏–π –≥–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self.stats['total_gas_used']:,}")
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
            self.logger.info(f"‚è≥ –û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–µ–∫: {self.stats['total_delay_time']:.1f} —Å–µ–∫—É–Ω–¥")
            
            if success_count > 0:
                avg_amount = self.stats['total_sent'] / success_count
                self.logger.info(f"üìà –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: {avg_amount:.8f} ETH")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
                remaining_amounts = [acc.get('target_remaining', 0) for acc in self.stats['successful_accounts'] if acc.get('target_remaining')]
                if remaining_amounts:
                    avg_remaining = sum(remaining_amounts) / len(remaining_amounts)
                    min_remaining_actual = min(remaining_amounts)
                    max_remaining_actual = max(remaining_amounts)
                    self.logger.info(f"üé≤ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: –º–∏–Ω={min_remaining_actual:.8f}, –º–∞–∫—Å={max_remaining_actual:.8f}, —Å—Ä–µ–¥–Ω–µ–µ={avg_remaining:.8f} ETH")

        self.save_results_to_files()
        self.logger.info("=" * 60)